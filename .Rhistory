dbname = db)
dbListTables(pool)
golem::add_fct("getActiveCompounds", with_test = TRUE)
herbs <- c("附子","白术")
data <- pool %>%
tbl("herb_ingredient") %>%
filter(herbs) %>%
collect()
dbListFields(pool,"herb_ingredient")
shiny::runApp()
runApp()
?withSpinner
runApp()
library(shinyBS)
runApp()
## Dependencies ----
## Amend DESCRIPTION with dependencies read from package code parsing
## install.packages('attachment') # if needed.
attachment::att_amend_desc()
# 构建 SQL 查询
query <- sprintf(
"SELECT * FROM herb_ingredient WHERE Chinese_Name IN ('%s')",
paste(herbs, collapse = "','")
)
herbs <- c("附子","白术")
# 构建 SQL 查询
query <- sprintf(
"SELECT * FROM herb_ingredient WHERE Chinese_Name IN ('%s')",
paste(herbs, collapse = "','")
)
query
library(pool)
library(DBI)
# 创建 SQLite 数据库连接池
pool <- dbPool(
drv = RSQLite::SQLite(),  # 使用 SQLite 驱动
dbname = "tcmie.db"       # 数据库文件路径
)
data <- dbGetQuery(pool, query)
library(pool)
library(DBI)
# 创建 SQLite 数据库连接池
pool <- dbPool(
drv = RSQLite::SQLite(),  # 使用 SQLite 驱动
dbname = "inst/app/data/tcmie.db"       # 数据库文件路径
)
data <- dbGetQuery(pool, query)
data
View(data)
names(data)
# 构建 SQL 查询
query <- sprintf(
"SELECT hi.*, i.*
FROM herb_ingredient hi
JOIN ingredient i ON hi.Ingredient_ID = i.Ingredient_ID
WHERE hi.Chinese_Name IN ('%s')",
paste(herbs, collapse = "','")
)
data <- dbGetQuery(pool, query)
View(data)
# 使用 tryCatch 捕获错误
tryCatch({
# 检查参数
if (is.null(pool)) {
stop("数据库连接池不能为空！")
}
if (is.null(herb_ingredient_table) || is.null(ingredient_table)) {
stop("草药成分表和成分表名称不能为空！")
}
if (is.null(herbs) || length(herbs) == 0) {
stop("草药名称列表不能为空！")
}
# 构建基础 SQL 查询
query <- sprintf(
"SELECT hi.*, i.*
FROM %s hi
JOIN %s i ON hi.Ingredient_ID = i.Ingredient_ID
WHERE hi.Chinese_Name IN ('%s')",
herb_ingredient_table,
ingredient_table,
paste(herbs, collapse = "','")
)
# 添加可选筛选条件
if (!is.null(ob)) {
query <- paste0(query, " AND i.OB = ", ob)
}
if (!is.null(dl)) {
query <- paste0(query, " AND i.DL >= ", dl)
}
if (!is.null(ro5)) {
query <- paste0(query, " AND i.RO5 <= ", ro5)
}
# 执行查询
data <- dbGetQuery(pool, query)
# 返回结果
return(data)
}, error = function(e) {
# 捕获错误并返回友好的提示信息
message("查询失败：", e$message)
return(NULL)  # 返回 NULL 表示查询失败
})
#' getActiveCompounds
#'
#' @description A fct function
#'
#' @param pool dbPool
#' @param table table in database
#' @param herbs herbs name chars
#' @param ob OB thr
#' @param dl DL thr
#' @param ro5 RO5 thr
#'
#' @return res
#'
#' @export
#'
#' @noRd
getActiveCompounds <- function(
pool,
herb_ingredient_table,
ingredient_table,
herbs,
ob=NULL,
dl=NULL,
ro5=NULL
) {
# 使用 tryCatch 捕获错误
tryCatch({
# 检查参数
if (is.null(pool)) {
stop("数据库连接池不能为空！")
}
if (is.null(herb_ingredient_table) || is.null(ingredient_table)) {
stop("草药成分表和成分表名称不能为空！")
}
if (is.null(herbs) || length(herbs) == 0) {
stop("草药名称列表不能为空！")
}
# 构建基础 SQL 查询
query <- sprintf(
"SELECT hi.*, i.*
FROM %s hi
JOIN %s i ON hi.Ingredient_ID = i.Ingredient_ID
WHERE hi.Chinese_Name IN ('%s')",
herb_ingredient_table,
ingredient_table,
paste(herbs, collapse = "','")
)
# 添加可选筛选条件
if (!is.null(ob)) {
query <- paste0(query, " AND i.OB = ", ob)
}
if (!is.null(dl)) {
query <- paste0(query, " AND i.DL >= ", dl)
}
if (!is.null(ro5)) {
query <- paste0(query, " AND i.RO5 <= ", ro5)
}
# 执行查询
data <- dbGetQuery(pool, query)
# 返回结果
return(data)
}, error = function(e) {
# 捕获错误并返回友好的提示信息
message("查询失败：", e$message)
return(NULL)  # 返回 NULL 表示查询失败
})
}
data <- getActiveCompounds(
pool = pool,
herb_ingredient_table = "herb_ingredient",
ingredient_table = "ingredient",
herbs = c("附子", "白术")
)
data <- getActiveCompounds(
pool = pool,
herb_ingredient_table = "herb_ingredient",
ingredient_table = "ingredient",
herbs = c("附子", "白术"),
)
data <- getActiveCompounds(
pool = pool,
herb_ingredient_table = "herb_ingredient",
ingredient_table = "ingredient",
herbs = c("附子", "白术"),
ob = 'Y'
)
data <- getActiveCompounds(
pool = pool,
herb_ingredient_table = "herb_ingredient",
ingredient_table = "ingredient",
herbs = c("附子", "白术")
)
View(data)
data <- getActiveCompounds(
pool = pool,
herb_ingredient_table = "herb_ingredient",
ingredient_table = "ingredient",
herbs = c("附子", "白术"),
ob = "Y"
)
#' getActiveCompounds
#'
#' @description A fct function
#'
#' @param pool dbPool
#' @param table table in database
#' @param herbs herbs name chars
#' @param ob OB thr
#' @param dl DL thr
#' @param ro5 RO5 thr
#'
#' @return res
#'
#' @export
#'
#' @noRd
getActiveCompounds <- function(
pool,
herb_ingredient_table,
ingredient_table,
herbs,
ob=NULL,
dl=NULL,
ro5=NULL
) {
# 使用 tryCatch 捕获错误
tryCatch({
# 检查参数
if (is.null(pool)) {
stop("数据库连接池不能为空！")
}
if (is.null(herb_ingredient_table) || is.null(ingredient_table)) {
stop("草药成分表和成分表名称不能为空！")
}
if (is.null(herbs) || length(herbs) == 0) {
stop("草药名称列表不能为空！")
}
# 构建基础 SQL 查询
query <- sprintf(
"SELECT hi.*, i.*
FROM %s hi
JOIN %s i ON hi.Ingredient_ID = i.Ingredient_ID
WHERE hi.Chinese_Name IN ('%s')",
herb_ingredient_table,
ingredient_table,
paste(herbs, collapse = "','")
)
# 添加可选筛选条件
if (!is.null(ob)) {
query <- paste0(query, " AND i.OB = '", ob, "'")
}
if (!is.null(dl)) {
query <- paste0(query, " AND i.DL >= ", dl)
}
if (!is.null(ro5)) {
query <- paste0(query, " AND i.RO5 = ", ro5)
}
# 执行查询
data <- dbGetQuery(pool, query)
# 返回结果
return(data)
}, error = function(e) {
# 捕获错误并返回友好的提示信息
message("查询失败：", e$message)
return(NULL)  # 返回 NULL 表示查询失败
})
}
data <- getActiveCompounds(
pool = pool,
herb_ingredient_table = "herb_ingredient",
ingredient_table = "ingredient",
herbs = c("附子", "白术"),
ob = "Y"
)
View(data)
data <- getActiveCompounds(
pool = pool,
herb_ingredient_table = "herb_ingredient",
ingredient_table = "ingredient",
herbs = c("附子", "白术"),
ob = "Y",
dl = 0.18
)
View(data)
View(data)
#' getActiveCompounds
#'
#' @description A fct function
#'
#' @param pool dbPool
#' @param table table in database
#' @param herbs herbs name chars
#' @param ob OB thr
#' @param dl DL thr
#' @param ro5 RO5 thr
#'
#' @return res
#'
#' @export
#'
#' @noRd
library(dplyr)
library(pool)
library(DBI)
library(RSQLite)
getActiveCompounds <- function(
pool,
herb_ingredient_table,
ingredient_table,
herbs,
ob=NULL,
dl=NULL,
ro5=NULL
) {
# 使用 tryCatch 捕获错误
tryCatch({
# 检查参数
if (is.null(pool)) {
stop("数据库连接池不能为空！")
}
if (is.null(herb_ingredient_table) || is.null(ingredient_table)) {
stop("草药成分表和成分表名称不能为空！")
}
if (is.null(herbs) || length(herbs) == 0) {
stop("草药名称列表不能为空！")
}
# 构建基础 SQL 查询
query <- sprintf(
"SELECT hi.*, i.*
FROM %s hi
JOIN %s i ON hi.Ingredient_ID = i.Ingredient_ID
WHERE hi.Chinese_Name IN ('%s')",
herb_ingredient_table,
ingredient_table,
paste(herbs, collapse = "','")
)
# 添加可选筛选条件
if (!is.null(ob)) {
query <- paste0(query, " AND i.OB = '", ob, "'")
}
if (!is.null(dl)) {
query <- paste0(query, " AND i.DL >= ", dl)
}
if (!is.null(ro5)) {
query <- paste0(query, " AND i.ALERTS = ", ro5)
}
# 执行查询
data <- dbGetQuery(pool, query)
# 返回结果
return(data)
}, error = function(e) {
# 捕获错误并返回友好的提示信息
message("查询失败：", e$message)
return(NULL)  # 返回 NULL 表示查询失败
})
}
data <- getActiveCompounds(
pool = pool,
herb_ingredient_table = "herb_ingredient",
ingredient_table = "ingredient",
herbs = c("附子", "白术"),
ob = "Y",
dl = 0.18,
ro5 =2
)
#' getActiveCompounds
#'
#' @description A fct function
#'
#' @param pool dbPool
#' @param table table in database
#' @param herbs herbs name chars
#' @param ob OB thr
#' @param dl DL thr
#' @param ro5 RO5 thr
#'
#' @return res
#'
#' @export
#'
#' @noRd
library(dplyr)
library(pool)
library(DBI)
library(RSQLite)
getActiveCompounds <- function(
pool,
herb_ingredient_table,
ingredient_table,
herbs,
ob=NULL,
dl=NULL,
ro5=NULL
) {
# 使用 tryCatch 捕获错误
tryCatch({
# 检查参数
if (is.null(pool)) {
stop("数据库连接池不能为空！")
}
if (is.null(herb_ingredient_table) || is.null(ingredient_table)) {
stop("草药成分表和成分表名称不能为空！")
}
if (is.null(herbs) || length(herbs) == 0) {
stop("草药名称列表不能为空！")
}
# 构建基础 SQL 查询
query <- sprintf(
"SELECT hi.*, i.*
FROM %s hi
JOIN %s i ON hi.Ingredient_ID = i.Ingredient_ID
WHERE hi.Chinese_Name IN ('%s')",
herb_ingredient_table,
ingredient_table,
paste(herbs, collapse = "','")
)
# 添加可选筛选条件
if (!is.null(ob)) {
query <- paste0(query, " AND i.OB = '", ob, "'")
}
if (!is.null(dl)) {
query <- paste0(query, " AND i.DL >= ", dl)
}
if (!is.null(ro5)) {
query <- paste0(query, " AND i.ALERTS <= ", ro5)
}
# 执行查询
data <- dbGetQuery(pool, query)
# 返回结果
return(data)
}, error = function(e) {
# 捕获错误并返回友好的提示信息
message("查询失败：", e$message)
return(NULL)  # 返回 NULL 表示查询失败
})
}
data <- getActiveCompounds(
pool = pool,
herb_ingredient_table = "herb_ingredient",
ingredient_table = "ingredient",
herbs = c("附子", "白术"),
ob = "Y",
dl = 0.18,
ro5 =2
)
View(data)
?ifelse
## Dependencies ----
## Amend DESCRIPTION with dependencies read from package code parsing
## install.packages('attachment') # if needed.
attachment::att_amend_desc()
## Dependencies ----
## Amend DESCRIPTION with dependencies read from package code parsing
## install.packages('attachment') # if needed.
attachment::att_amend_desc()
## Dependencies ----
## Amend DESCRIPTION with dependencies read from package code parsing
## install.packages('attachment') # if needed.
attachment::att_amend_desc()
## Dependencies ----
## Amend DESCRIPTION with dependencies read from package code parsing
## install.packages('attachment') # if needed.
attachment::att_amend_desc()
## Dependencies ----
## Amend DESCRIPTION with dependencies read from package code parsing
## install.packages('attachment') # if needed.
attachment::att_amend_desc()
## Dependencies ----
## Amend DESCRIPTION with dependencies read from package code parsing
## install.packages('attachment') # if needed.
attachment::att_amend_desc()
## Dependencies ----
## Amend DESCRIPTION with dependencies read from package code parsing
## install.packages('attachment') # if needed.
attachment::att_amend_desc()
## Dependencies ----
## Amend DESCRIPTION with dependencies read from package code parsing
## install.packages('attachment') # if needed.
attachment::att_amend_desc()
## Dependencies ----
## Amend DESCRIPTION with dependencies read from package code parsing
## install.packages('attachment') # if needed.
attachment::att_amend_desc()
runApp()
runApp()
runApp()
runApp()
pool::dbPool(
drv = RSQLite::SQLite(),  # SQLite 驱动
dbname = "inst/app/data/tcmie.db"  # 数据库文件路径
# 修改 init_db_pool 中的路径
# dbname = system.file("app/data/tcmie.db", package = "TCMIE")
)
pool <- pool::dbPool(
drv = RSQLite::SQLite(),  # SQLite 驱动
dbname = "inst/app/data/tcmie.db"  # 数据库文件路径
# 修改 init_db_pool 中的路径
# dbname = system.file("app/data/tcmie.db", package = "TCMIE")
)
dbListTables(pool)
dbListFields(pool,"disease")
dbListFields(pool,"disease_target")
res<- dbGetQuery(pool, "SELECT Disease_Name FROM disease")[, 1]
res<- dbGetQuery(pool, "SELECT Disease_Name FROM disease")
View(res)
runApp()
runApp()
?selectizeInput
runApp()
runApp()
runApp()

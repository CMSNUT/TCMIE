role = c("aut", "cre") # Your role (here author/creator)
),
repo_url = NULL, # The URL of the GitHub repo (optional),
pkg_version = "0.0.0.9000", # The version of the package containing the app
set_options = TRUE # Set the global golem options
)
## Install the required dev dependencies ----
golem::install_dev_deps()
## Favicon ----
# If you want to change the favicon (default is golem's one)
golem::use_favicon() # path = "path/to/ico". Can be an online file.
## Dependencies ----
## Amend DESCRIPTION with dependencies read from package code parsing
## install.packages('attachment') # if needed.
attachment::att_amend_desc()
## Dependencies ----
## Amend DESCRIPTION with dependencies read from package code parsing
## install.packages('attachment') # if needed.
attachment::att_amend_desc()
golem::add_css_file("custom")
# You're now set! ----
# go to dev/03_deploy.R
rstudioapi::navigateToFile("dev/03_deploy.R")
## Run checks ----
## Check the package before sending to prod
devtools::check()
## Run checks ----
## Check the package before sending to prod
devtools::check()
golem_welcome_page
golem::add_shinyappsio_file()
help(navbarPage)
shiny::runApp()
runApp()
tagList(
# Leave this function for adding external resources
golem_add_external_resources(),
navbarPage(
title= tagList(
span(
class = "logo-lg",
HTML(
"<img src='www/logo.png' width=35 style='margin-right:10px;margin-bottom:10px'/><format style='text-align: left; font-family: Knewave; font-size: 30px; font-style: normal; font-variant: normal;'>BASuite<br>xxx</format>"
)
),
img(src = "www/logo.png", width = 35)
),
tabPanel("Plot")
)
)
runApp()
runApp()
runApp()
runApp()
tagList(
# Leave this function for adding external resources
golem_add_external_resources(),
fluidPage(
HTML("<format style='font-size:40pt;text-align: center; font-style: blod; '>中药智鉴 TCMIE</format>")
)
)
runApp()
?titlePanel
if (interactive()) {
ui <- fluidPage(
titlePanel("Hello Shiny!")
)
shinyApp(ui, server = function(input, output) { })
}
runApp()
## Dependencies ----
## Amend DESCRIPTION with dependencies read from package code parsing
## install.packages('attachment') # if needed.
attachment::att_amend_desc()
runApp()
runApp()
## Dependencies ----
## Amend DESCRIPTION with dependencies read from package code parsing
## install.packages('attachment') # if needed.
attachment::att_amend_desc()
runApp()
runApp()
## Dependencies ----
## Amend DESCRIPTION with dependencies read from package code parsing
## install.packages('attachment') # if needed.
attachment::att_amend_desc()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
icon
?icon
runApp()
runApp()
?icon
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
golem::add_module(name = "gui_np", with_test = TRUE)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?
sidebarLayout
runApp()
runApp()
?
selectizeInput
if (interactive()) {
# basic example
shinyApp(
ui = fluidPage(
selectInput("variable", "Variable:",
c("Cylinders" = "cyl",
"Transmission" = "am",
"Gears" = "gear")),
tableOutput("data")
),
server = function(input, output) {
output$data <- renderTable({
mtcars[, c("mpg", input$variable), drop = FALSE]
}, rownames = TRUE)
}
)
# demoing group support in the `choices` arg
shinyApp(
ui = fluidPage(
selectInput("state", "Choose a state:",
list(`East Coast` = list("NY", "NJ", "CT"),
`West Coast` = list("WA", "OR", "CA"),
`Midwest` = list("MN", "WI", "IA"))
),
textOutput("result")
),
server = function(input, output) {
output$result <- renderText({
paste("You chose", input$state)
})
}
)
}
if (interactive()) {
# basic example
shinyApp(
ui = fluidPage(
selectInput("variable", "Variable:",
c("Cylinders" = "cyl",
"Transmission" = "am",
"Gears" = "gear"),multiple=T),
tableOutput("data")
),
server = function(input, output) {
output$data <- renderTable({
mtcars[, c("mpg", input$variable), drop = FALSE]
}, rownames = TRUE)
}
)
# demoing group support in the `choices` arg
shinyApp(
ui = fluidPage(
selectInput("state", "Choose a state:",
list(`East Coast` = list("NY", "NJ", "CT"),
`West Coast` = list("WA", "OR", "CA"),
`Midwest` = list("MN", "WI", "IA"))
),
textOutput("result")
),
server = function(input, output) {
output$result <- renderText({
paste("You chose", input$state)
})
}
)
}
if (interactive()) {
# basic example
shinyApp(
ui = fluidPage(
selectInput("variable", "Variable:",
c("Cylinders" = "cyl",
"Transmission" = "am",
"Gears" = "gear"),multiple=T),
tableOutput("data")
),
server = function(input, output) {
output$data <- renderTable({
mtcars[, c("mpg", input$variable), drop = FALSE]
}, rownames = TRUE)
}
)
# demoing group support in the `choices` arg
shinyApp(
ui = fluidPage(
selectInput("state", "Choose a state:",
list(`East Coast` = list("NY", "NJ", "CT"),
`West Coast` = list("WA", "OR", "CA"),
`Midwest` = list("MN", "WI", "IA")),multiple=T
),
textOutput("result")
),
server = function(input, output) {
output$result <- renderText({
paste("You chose", input$state)
})
}
)
}
if (interactive()) {
# basic example
shinyApp(
ui = fluidPage(
selectInput("variable", "Variable:",
c("Cylinders" = "cyl",
"Transmission" = "am",
"Gears" = "gear"),multiple=T),
tableOutput("data")
),
server = function(input, output) {
output$data <- renderTable({
mtcars[, c("mpg", input$variable), drop = FALSE]
}, rownames = TRUE)
}
)
# demoing group support in the `choices` arg
shinyApp(
ui = fluidPage(
selectInput("state", "Choose a state:",
list(`East Coast` = list("NY", "NJ", "CT"),
`West Coast` = list("WA", "OR", "CA"),
`Midwest` = list("MN", "WI", "IA")),multiple=T
),
textOutput("result")
),
server = function(input, output) {
output$result <- renderText({
paste("You chose", input$state)
})
}
)
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shiny)
library(shinyBS)  # 用于弹出对话框
# 定义 UI
ui <- fluidPage(
# 添加自定义 CSS
tags$head(
tags$style(HTML("
.help-icon {
margin-left: 10px;
cursor: pointer;
color: #007bff;
}
"))
),
# 主界面
titlePanel("SelectizeInput with Help Dialog"),
sidebarLayout(
sidebarPanel(
# selectizeInput
div(
style = "display: flex; align-items: center;",
selectizeInput(
inputId = "my_select",
label = "Choose an option",
choices = c("Option 1", "Option 2", "Option 3")
),
# 帮助按钮
icon("question-circle", class = "help-icon") %>%
bsTooltip(
title = "This is a help message for the selectizeInput.",
placement = "right",
trigger = "click"
)
)
),
mainPanel(
textOutput("selected_option")
)
)
)
library(tidyverse)
library(shiny)
library(shinyBS)  # 用于弹出对话框
# 定义 UI
ui <- fluidPage(
# 添加自定义 CSS
tags$head(
tags$style(HTML("
.help-icon {
margin-left: 10px;
cursor: pointer;
color: #007bff;
}
"))
),
# 主界面
titlePanel("SelectizeInput with Help Dialog"),
sidebarLayout(
sidebarPanel(
# selectizeInput
div(
style = "display: flex; align-items: center;",
selectizeInput(
inputId = "my_select",
label = "Choose an option",
choices = c("Option 1", "Option 2", "Option 3")
),
# 帮助按钮
icon("question-circle", class = "help-icon") %>%
bsTooltip(
title = "This is a help message for the selectizeInput.",
placement = "right",
trigger = "click"
)
)
),
mainPanel(
textOutput("selected_option")
)
)
)
# 定义服务器逻辑
server <- function(input, output, session) {
output$selected_option <- renderText({
paste("You selected:", input$my_select)
})
}
# 运行应用
shinyApp(ui = ui, server = server)
runApp()
## Dependencies ----
## Amend DESCRIPTION with dependencies read from package code parsing
## install.packages('attachment') # if needed.
attachment::att_amend_desc()
runApp()
?bsTooltip
library(shiny)
library(shinyBS)  # 用于弹出对话框
# 定义 UI
ui <- fluidPage(
# 添加自定义 CSS
tags$head(
tags$style(HTML("
.help-icon {
margin-left: 10px;
cursor: pointer;
color: #007bff;
}
"))
),
# 主界面
titlePanel("SelectizeInput with Help Dialog"),
sidebarLayout(
sidebarPanel(
# selectizeInput
div(
style = "display: flex; align-items: center;",
selectizeInput(
inputId = "my_select",
label = "Choose an option",
choices = c("Option 1", "Option 2", "Option 3")
),
# 帮助按钮
icon("question-circle", class = "help-icon") %>%
bsTooltip(
title = "This is a help message for the selectizeInput.",
placement = "right",
trigger = "click"
)
)
),
mainPanel(
textOutput("selected_option")
)
)
)
# 定义服务器逻辑
server <- function(input, output, session) {
output$selected_option <- renderText({
paste("You selected:", input$my_select)
})
}
# 运行应用
shinyApp(ui = ui, server = server)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
## Dependencies ----
## Amend DESCRIPTION with dependencies read from package code parsing
## install.packages('attachment') # if needed.
attachment::att_amend_desc()
## Dependencies ----
## Amend DESCRIPTION with dependencies read from package code parsing
## install.packages('attachment') # if needed.
attachment::att_amend_desc()
## Dependencies ----
## Amend DESCRIPTION with dependencies read from package code parsing
## install.packages('attachment') # if needed.
attachment::att_amend_desc()
library(pool)
library(RSQLite)
pool <- dbPool(
drv = RSQLite::SQLite(),
dbname = "data/tcmie.db"  # 数据库文件路径
)
pool <- dbPool(
drv = RSQLite::SQLite(),
dbname = "inst/app/data/tcmie.db"  # 数据库文件路径
)
dbListTables()
dbListTables(pool)
dbListFields(pool,herb)
dbListFields(pool,"herb")
library(tidyverse)
my_table <- tbl(pool, "herb")  # 引用表
View(my_table)
# 链式查询
result <- my_table %>%
filter(Chinese_Name="黄芪")
# 链式查询
result <- my_table %>%
filter(Chinese_Name=="黄芪")
collect()  # 获取数据到内存
# 链式查询
result <- my_table %>%
filter(Chinese_Name=="黄芪") %>%
collect()  # 获取数据到内存
result
# 链式查询
result <- my_table %>%
filter(Chinese_Name=="黄芪") %>%
collect()  # 获取数据到内存
# 链式查询
result <- my_table %>%
filter(Chinese_Name=="黄芪") %>%
select(2) %>%
collect()  # 获取数据到内存
View(result)
# 链式查询
result <- my_table %>%
filter(Chinese_Name=="黄芪") %>%
select(2) %>%
as.character %>%
collect()  # 获取数据到内存
herb <- dbGetQuery(pool,"SELECT Chinese_Name" FROM herb)
herb <- dbGetQuery(pool,"SELECT Chinese_Name FROM herb" )
herb
herb <- dbGetQuery(pool,"SELECT Chinese_Name FROM herb" ) %>% as.character
herb <- dbGetQuery(pool,"SELECT Chinese_Name FROM herb" )[,1]
?updateselectizeInput
?updateSelectizeInput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()

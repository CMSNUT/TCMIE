pool <- dbPool(
drv = RSQLite::SQLite(),
dbname = "data/tcmie.db"  # 数据库文件路径
)
pool <- dbPool(
drv = RSQLite::SQLite(),
dbname = "inst/app/data/tcmie.db"  # 数据库文件路径
)
dbListTables()
dbListTables(pool)
dbListFields(pool,herb)
dbListFields(pool,"herb")
library(tidyverse)
my_table <- tbl(pool, "herb")  # 引用表
View(my_table)
# 链式查询
result <- my_table %>%
filter(Chinese_Name="黄芪")
# 链式查询
result <- my_table %>%
filter(Chinese_Name=="黄芪")
collect()  # 获取数据到内存
# 链式查询
result <- my_table %>%
filter(Chinese_Name=="黄芪") %>%
collect()  # 获取数据到内存
result
# 链式查询
result <- my_table %>%
filter(Chinese_Name=="黄芪") %>%
collect()  # 获取数据到内存
# 链式查询
result <- my_table %>%
filter(Chinese_Name=="黄芪") %>%
select(2) %>%
collect()  # 获取数据到内存
View(result)
# 链式查询
result <- my_table %>%
filter(Chinese_Name=="黄芪") %>%
select(2) %>%
as.character %>%
collect()  # 获取数据到内存
herb <- dbGetQuery(pool,"SELECT Chinese_Name" FROM herb)
herb <- dbGetQuery(pool,"SELECT Chinese_Name FROM herb" )
herb
herb <- dbGetQuery(pool,"SELECT Chinese_Name FROM herb" ) %>% as.character
herb <- dbGetQuery(pool,"SELECT Chinese_Name FROM herb" )[,1]
?updateselectizeInput
?updateSelectizeInput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
?markdown
?includeMarkdown
?checkboxGroupInput
ui <- fluidPage(
checkboxGroupInput("variable", "Variables to show:",
c("Cylinders" = "cyl",
"Transmission" = "am",
"Gears" = "gear")),
tableOutput("data")
)
server <- function(input, output, session) {
output$data <- renderTable({
mtcars[, c("mpg", input$variable), drop = FALSE]
}, rownames = TRUE)
}
shinyApp(ui, server)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?
bsModal
runApp()
runApp()
runApp()
runApp()
?actionLink
runApp()
## Dependencies ----
## Amend DESCRIPTION with dependencies read from package code parsing
## install.packages('attachment') # if needed.
attachment::att_amend_desc()
runApp()
runApp()
library(shiny)
library(shinyBS)
app = shinyApp(
ui =
fluidPage(
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30),
actionButton("tabBut", "View Table")
),
mainPanel(
plotOutput("distPlot"),
bsModal("modalExample", "Data Table", "tabBut", size = "large",
dataTableOutput("distTable"))
)
)
),
server =
function(input, output, session) {
output$distPlot <- renderPlot({
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
output$distTable <- renderDataTable({
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
tab <- hist(x, breaks = bins, plot = FALSE)
tab$breaks <- sapply(seq(length(tab$breaks) - 1), function(i) {
paste0(signif(tab$breaks[i], 3), "-", signif(tab$breaks[i+1], 3))
})
tab <- as.data.frame(do.call(cbind, tab))
colnames(tab) <- c("Bins", "Counts", "Density")
return(tab[, 1:3])
}, options = list(pageLength=10))
}
)
## Not run:
runApp(app)
runApp()
runApp()
runApp()
?bsModal
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?conditionalPanel
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?h5
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
tagList(
# Leave this function for adding external resources
golem_add_external_resources(),
shinyjs::useShinyjs(), # 加载 shinyjs
tags$head(
tags$link(rel = "stylesheet", type = "text/css", href = "www/styles.css"),
tags$script(src = "www/scripts.js") # 确保路径正确
),
div(
id = "header",
style = "display: center;font-family: Microsoft YaHei; font-size: 30px; font-style: blod;color:white;",
"中药智鉴"
),
shinydashboardPlus::dashboardPage(
header=shinydashboardPlus::dashboardHeader(
# fixed = TRUE,
titleWidth = 150,
disable = T
),
sidebar=shinydashboardPlus::dashboardSidebar(
width = 150,
disable = TRUE,
sidebarMenu(
menuItem("中药智鉴", tabName = "home", icon = icon("home")),
menuItem("网络药理", tabName = "netpharm", icon = icon("yin-yang")),
menuItem("分子对接", tabName = "docking", icon = icon("magnet")),
menuItem("药物性质", tabName = "property", icon = icon("newspaper")),
menuItem("药材质控", tabName = "quality", icon = icon("water")),
menuItem("生信分析", tabName = "bioinfo", icon = icon("dna")),
menuItem("数据管理", tabName = "data", icon = icon("database")),
menuItem("实用工具", tabName = "tools", icon = icon("wrench")),
menuItem("研究案例", tabName = "cases", icon = icon("file-powerpoint"))
)
),
body=shinydashboard::dashboardBody(
tabItems(
# 主页 ----
tabItem(
tabName = "home",
div(
class = "tab-content",
includeMarkdown("./R/home.md")
)
),
# 网药分析 ----
tabItem(
tabName = "netpharm",
div(
class = "tab-content",
mod_gui_np_ui("np")
)
),
# 分子对接 ----
tabItem(
tabName = "docking",
div(
class = "tab-content",
)
),
# 物性预测 ----
tabItem(
tabName = "property",
div(
class = "tab-content",
)
),
# 药材质控 ----
tabItem(
tabName = "quality",
div(
class = "tab-content",
)
),
# 生信分析 ----
tabItem(
tabName = "bioinfo",
div(
class = "tab-content",
)
),
# 数据管理
tabItem(
tabName = "data",
div(
class = "tab-content",
p("数据管理内容")
)
),
tabItem(
tabName = "tools",
div(
class = "tab-content",
p("工具内容")
)
),
tabItem(
tabName = "cases",
div(
class = "tab-content",
p("研究案例")
)
)
),
div(
id = "back-to-top",
style = "display: none;", # 初始隐藏
actionButton("backToTop", "TOP",class="btn-primary") # 按钮内容为向上的箭头
),
controlbar=shinydashboardPlus::dashboardControlbar(),
skin="blue"
)
)
)
runApp()
runApp()
shiny::runApp()
?fileInput
runApp()
library(shiny)
ui <- fluidPage(
titlePanel("文件上传示例"),
sidebarLayout(
sidebarPanel(
fileInput("file", "选择文件",
accept = c(".csv", ".xlsx", ".xls", ".txt")
)
),
mainPanel(
tableOutput("table")
)
)
)
server <- function(input, output) {
output$table <- renderTable({
req(input$file)
file <- input$file
ext <- tools::file_ext(file$name)
data <- switch(ext,
csv = read.csv(file$datapath),
xlsx = readxl::read_excel(file$datapath),
xls = readxl::read_excel(file$datapath),
txt = read.table(file$datapath, header = TRUE),
stop("不支持的文件类型")
)
return(data)
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
titlePanel("文件上传示例"),
sidebarLayout(
sidebarPanel(
fileInput("file", "选择文件",
accept = c(
".csv", "text/csv",          # CSV 文件
".xlsx", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",  # XLSX 文件
".xls", "application/vnd.ms-excel",  # XLS 文件
".txt", "text/plain"        # TXT 文件
)
)
),
mainPanel(
tableOutput("table")
)
)
)
server <- function(input, output) {
output$table <- renderTable({
req(input$file)
file <- input$file
ext <- tools::file_ext(file$name)
data <- switch(ext,
csv = read.csv(file$datapath),
xlsx = readxl::read_excel(file$datapath),
xls = readxl::read_excel(file$datapath),
txt = read.table(file$datapath, header = TRUE),
stop("不支持的文件类型")
)
return(data)
})
}
shinyApp(ui = ui, server = server)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
## Dependencies ----
## Amend DESCRIPTION with dependencies read from package code parsing
## install.packages('attachment') # if needed.
attachment::att_amend_desc()
runApp()
source("G:/R/TCMIE/R/mod_gui_np.R")
install.packages("shiny")
## Dependencies ----
## Amend DESCRIPTION with dependencies read from package code parsing
## install.packages('attachment') # if needed.
attachment::att_amend_desc()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?bsModal
ui <- fluidPage(
actionButton("showModal", "Show Modal"),
bsModal("myModal", "Modal Title", "showModal",
modalBody = "This is the body of the modal")
)
library(shiny)
library(shinyBS)
ui <- fluidPage(
actionButton("showModal", "Show Modal"),
bsModal("myModal", "Modal Title", "showModal",
modalBody = "This is the body of the modal")
)
server <- function(input, output, session) {
observeEvent(input$showModal, {
shinyBS::showModal("myModal")
})
}
shinyApp(ui, server)
ui <- fluidPage(
actionButton("showModal", "Show Modal"),
bsModal("myModal", "Modal Title", "showModal",
modalBody = "This is the body of the modal")
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
ui <- fluidPage(
div(
class = "input-container",
checkboxInput(ns("ro5_threshold_setting"), label = "违背Lipinski规则(RO5)的数量容忍值"),
icon(
"question-circle",
class = "help-icon",
id = ns("ro5_threshold_setting_help_icon")
)
),
bsModal("ro5_threshold_setting_help_modal", "Modal Title", "ro5_threshold_setting_help_icon",
modalBody = "This is the body of the modal")
)
ui <- fluidPage(
div(
class = "input-container",
checkboxInput("ro5_threshold_setting", label = "违背Lipinski规则(RO5)的数量容忍值"),
icon(
"question-circle",
class = "help-icon",
id = "ro5_threshold_setting_help_icon"
)
),
bsModal("ro5_threshold_setting_help_modal", "Modal Title", "ro5_threshold_setting_help_icon",
modalBody = "This is the body of the modal")
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
bsExample("Modals")
library(shinyBS)
bsExample("Modals")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?icon
runApp()
runApp()
runApp()
runApp()
?dbGetQuery
## Dependencies ----
## Amend DESCRIPTION with dependencies read from package code parsing
## install.packages('attachment') # if needed.
attachment::att_amend_desc()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?titlePanel
runApp()
runApp()
runApp()
runApp()

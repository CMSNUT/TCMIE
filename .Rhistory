),
# 网药分析 ----
tabItem(
tabName = "netpharm",
div(
class = "tab-content",
mod_gui_np_ui("np")
)
),
# 分子对接 ----
tabItem(
tabName = "docking",
div(
class = "tab-content",
)
),
# 物性预测 ----
tabItem(
tabName = "property",
div(
class = "tab-content",
)
),
# 药材质控 ----
tabItem(
tabName = "quality",
div(
class = "tab-content",
)
),
# 生信分析 ----
tabItem(
tabName = "bioinfo",
div(
class = "tab-content",
)
),
# 数据管理
tabItem(
tabName = "data",
div(
class = "tab-content",
p("数据管理内容")
)
),
tabItem(
tabName = "tools",
div(
class = "tab-content",
p("工具内容")
)
),
tabItem(
tabName = "cases",
div(
class = "tab-content",
p("研究案例")
)
)
),
div(
id = "back-to-top",
style = "display: none;", # 初始隐藏
actionButton("backToTop", "TOP",class="btn-primary") # 按钮内容为向上的箭头
),
controlbar=shinydashboardPlus::dashboardControlbar(),
skin="blue"
)
)
)
runApp()
runApp()
shiny::runApp()
?fileInput
runApp()
library(shiny)
ui <- fluidPage(
titlePanel("文件上传示例"),
sidebarLayout(
sidebarPanel(
fileInput("file", "选择文件",
accept = c(".csv", ".xlsx", ".xls", ".txt")
)
),
mainPanel(
tableOutput("table")
)
)
)
server <- function(input, output) {
output$table <- renderTable({
req(input$file)
file <- input$file
ext <- tools::file_ext(file$name)
data <- switch(ext,
csv = read.csv(file$datapath),
xlsx = readxl::read_excel(file$datapath),
xls = readxl::read_excel(file$datapath),
txt = read.table(file$datapath, header = TRUE),
stop("不支持的文件类型")
)
return(data)
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
titlePanel("文件上传示例"),
sidebarLayout(
sidebarPanel(
fileInput("file", "选择文件",
accept = c(
".csv", "text/csv",          # CSV 文件
".xlsx", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",  # XLSX 文件
".xls", "application/vnd.ms-excel",  # XLS 文件
".txt", "text/plain"        # TXT 文件
)
)
),
mainPanel(
tableOutput("table")
)
)
)
server <- function(input, output) {
output$table <- renderTable({
req(input$file)
file <- input$file
ext <- tools::file_ext(file$name)
data <- switch(ext,
csv = read.csv(file$datapath),
xlsx = readxl::read_excel(file$datapath),
xls = readxl::read_excel(file$datapath),
txt = read.table(file$datapath, header = TRUE),
stop("不支持的文件类型")
)
return(data)
})
}
shinyApp(ui = ui, server = server)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
## Dependencies ----
## Amend DESCRIPTION with dependencies read from package code parsing
## install.packages('attachment') # if needed.
attachment::att_amend_desc()
runApp()
source("G:/R/TCMIE/R/mod_gui_np.R")
install.packages("shiny")
## Dependencies ----
## Amend DESCRIPTION with dependencies read from package code parsing
## install.packages('attachment') # if needed.
attachment::att_amend_desc()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?bsModal
ui <- fluidPage(
actionButton("showModal", "Show Modal"),
bsModal("myModal", "Modal Title", "showModal",
modalBody = "This is the body of the modal")
)
library(shiny)
library(shinyBS)
ui <- fluidPage(
actionButton("showModal", "Show Modal"),
bsModal("myModal", "Modal Title", "showModal",
modalBody = "This is the body of the modal")
)
server <- function(input, output, session) {
observeEvent(input$showModal, {
shinyBS::showModal("myModal")
})
}
shinyApp(ui, server)
ui <- fluidPage(
actionButton("showModal", "Show Modal"),
bsModal("myModal", "Modal Title", "showModal",
modalBody = "This is the body of the modal")
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
ui <- fluidPage(
div(
class = "input-container",
checkboxInput(ns("ro5_threshold_setting"), label = "违背Lipinski规则(RO5)的数量容忍值"),
icon(
"question-circle",
class = "help-icon",
id = ns("ro5_threshold_setting_help_icon")
)
),
bsModal("ro5_threshold_setting_help_modal", "Modal Title", "ro5_threshold_setting_help_icon",
modalBody = "This is the body of the modal")
)
ui <- fluidPage(
div(
class = "input-container",
checkboxInput("ro5_threshold_setting", label = "违背Lipinski规则(RO5)的数量容忍值"),
icon(
"question-circle",
class = "help-icon",
id = "ro5_threshold_setting_help_icon"
)
),
bsModal("ro5_threshold_setting_help_modal", "Modal Title", "ro5_threshold_setting_help_icon",
modalBody = "This is the body of the modal")
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
bsExample("Modals")
library(shinyBS)
bsExample("Modals")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?icon
runApp()
runApp()
runApp()
runApp()
?dbGetQuery
## Dependencies ----
## Amend DESCRIPTION with dependencies read from package code parsing
## install.packages('attachment') # if needed.
attachment::att_amend_desc()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?titlePanel
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
## Dependencies ----
## Amend DESCRIPTION with dependencies read from package code parsing
## install.packages('attachment') # if needed.
attachment::att_amend_desc()
runApp()
runApp()
runApp()
runApp()
runApp()
? tabsetPanel
library(shiny)
ui <- fluidPage(
# 多选输入控件
checkboxGroupInput(
"enrichment_setting",
"选择分析类型",
choices = c("kegg", "go", "pathway"),
selected = NULL
),
# tabsetPanel
tabsetPanel(
id = "main_tabs",
# KEGG 分析标签页（动态显示）
conditionalPanel(
condition = "input.enrichment_setting.includes('kegg')",
tabPanel("KEGG分析", h3("KEGG 分析内容"))
),
# GO 分析标签页（动态显示）
conditionalPanel(
condition = "input.enrichment_setting.includes('go')",
tabPanel("GO分析", h3("GO 分析内容"))
),
# Pathway 分析标签页（动态显示）
conditionalPanel(
condition = "input.enrichment_setting.includes('pathway')",
tabPanel("Pathway分析", h3("Pathway 分析内容"))
)
)
)
server <- function(input, output, session) {
# 可选：动态切换到第一个选中的标签页
observeEvent(input$enrichment_setting, {
if (length(input$enrichment_setting) > 0) {
selected_tab <- paste0(input$enrichment_setting[1], "分析")
updateTabsetPanel(session, "main_tabs", selected = selected_tab)
}
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
# 多选输入控件
checkboxGroupInput(
"enrichment_setting",
"选择分析类型",
choices = c("kegg", "go", "pathway"),
selected = NULL
),
# tabsetPanel
tabsetPanel(
id = "main_tabs",
# KEGG 分析标签页（动态显示）
conditionalPanel(
condition = "input.enrichment_setting.includes('kegg')",
tabPanel("KEGG分析", h3("KEGG 分析内容"))
),
# GO 分析标签页（动态显示）
conditionalPanel(
condition = "input.enrichment_setting.includes('go')",
tabPanel("GO分析", h3("GO 分析内容"))
),
# Pathway 分析标签页（动态显示）
conditionalPanel(
condition = "input.enrichment_setting.includes('pathway')",
tabPanel("Pathway分析", h3("Pathway 分析内容"))
)
)
)
server <- function(input, output, session) {
# 可选：动态切换到第一个选中的标签页
observeEvent(input$enrichment_setting, {
if (length(input$enrichment_setting) > 0) {
selected_tab <- paste0(input$enrichment_setting[1], "分析")
updateTabsetPanel(session, "main_tabs", selected = selected_tab)
}
})
}
shinyApp(ui, server)
runApp()
?updateTabsetPanel
runApp()
runApp()
runApp()
runApp()
## Dependencies ----
## Amend DESCRIPTION with dependencies read from package code parsing
## install.packages('attachment') # if needed.
attachment::att_amend_desc()
runApp()
runApp()
runApp()
## Dependencies ----
## Amend DESCRIPTION with dependencies read from package code parsing
## install.packages('attachment') # if needed.
attachment::att_amend_desc()
runApp()
runApp()
## Add modules ----
## Create a module infrastructure in R/
golem::add_module(name = "name_of_module1", with_test = TRUE) # Name of the module
## Dependencies ----
## Amend DESCRIPTION with dependencies read from package code parsing
## install.packages('attachment') # if needed.
attachment::att_amend_desc()
runApp()
runApp()
runApp()
paste0("input['", ns("enrichment_setting"), "'].includes('go')"
)
paste0("input['", "enrichment_setting", "'].includes('go')")
library(shiny)
ui <- fluidPage(
checkboxGroupInput(
"analysis_type",
"选择分析类型",
choices = c("kegg", "go", "pathway"),
selected = NULL
),
tabsetPanel(
id = "main_tabs",
# KEGG 分析标签页
conditionalPanel(
condition = "input.analysis_type.includes('kegg')",
tabPanel("KEGG分析", h3("KEGG 分析内容"))
),
# GO 分析标签页
conditionalPanel(
condition = "input.analysis_type.includes('go')",
tabPanel("GO分析", h3("GO 分析内容"))
),
# Pathway 分析标签页
conditionalPanel(
condition = "input.analysis_type.includes('pathway')",
tabPanel("Pathway分析", h3("Pathway 分析内容"))
)
)
)
server <- function(input, output, session) {
# 无需额外逻辑
}
shinyApp(ui, server)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
## Dependencies ----
## Amend DESCRIPTION with dependencies read from package code parsing
## install.packages('attachment') # if needed.
attachment::att_amend_desc()
runApp()
??shinyBS
help(package="shinyBS")
runApp()
runApp()
runApp()
runApp()
library(shiny)
library(shinyBS)
app = shinyApp(
ui =
fluidPage(
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30),
actionButton("tabBut", "View Table")
),
mainPanel(
plotOutput("distPlot"),
bsModal("modalExample", "Data Table", "tabBut", size = "large",
dataTableOutput("distTable"))
)
)
),
server =
function(input, output, session) {
output$distPlot <- renderPlot({
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
output$distTable <- renderDataTable({
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
tab <- hist(x, breaks = bins, plot = FALSE)
tab$breaks <- sapply(seq(length(tab$breaks) - 1), function(i) {
paste0(signif(tab$breaks[i], 3), "-", signif(tab$breaks[i+1], 3))
})
tab <- as.data.frame(do.call(cbind, tab))
colnames(tab) <- c("Bins", "Counts", "Density")
return(tab[, 1:3])
}, options = list(pageLength=10))
}
)
## Not run:
runApp(app)
runApp()
## Dependencies ----
## Amend DESCRIPTION with dependencies read from package code parsing
## install.packages('attachment') # if needed.
attachment::att_amend_desc()
runApp()
runApp()
## Dependencies ----
## Amend DESCRIPTION with dependencies read from package code parsing
## install.packages('attachment') # if needed.
attachment::att_amend_desc()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library("pool")
library("tidyverse")
library("RSQLite")
library("DBI")
db <- "inst/app/data/tcmie.db"
pool <- pool::dbPool(
drv = RSQLite::SQLite(),  # SQLite 驱动
dbname = db)
dbListTables(pool)
golem::add_fct("getActiveCompounds", with_test = TRUE)
herbs <- c("附子","白术")
data <- pool %>%
tbl("herb_ingredient") %>%
filter(herbs) %>%
collect()
dbListFields(pool,"herb_ingredient")
